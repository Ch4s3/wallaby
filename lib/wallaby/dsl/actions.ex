defmodule Wallaby.DSL.Actions do
  @moduledoc ~S"""
  Provides the action DSL.

  Actions are used to interact with form elements. They follow the same
  conventions as Wallaby.StatelessQuery. Form elements can be found based on
  their id, name, or label text:

  ```html
  <label for="first_name">
    First Name
  </label>
  <input id="user_first_name" type="text" name="first_name">
  ```

  ```
  fill_in(page, "First Name", with: "Grace")
  fill_in(page, "first_name", with: "Grace")
  fill_in(page, "user_first_name", with: "Grace")
  ```

  Note that the id selector does not need the `#`. This makes it easier to use
  with the ids generated by phoenix form helpers.

  There are several helpers for different interacting with different form elements.

  ```
  fill_in(page, "First Name", with: "Chris")
  choose(page, "Radio Button 1")
  check(page, "Checkbox")
  uncheck(page, "Checkbox")
  select(page, "My Awesome Select", option: "Option 1")
  click_on(page, "Some Button")
  attach_file(page, "Avatar", path: "test/fixtures/avatar.jpg")
  ```

  Actions return their parent element so that they can be chained together:

  ```
  page
  |> find(".signup-form")
  |> fill_in("Name", with: "Grace Hopper")
  |> fill_in("Email", with: "grace@hopper.com")
  |> click_on("Submit")
  ```
  """

  alias Wallaby.Element
  alias Wallaby.StatelessQuery
  alias Wallaby.Browser

  @type parent :: Wallaby.StatelessQuery.parent
  @type locator :: Wallaby.StatelessQuery.locator
  @type opts :: Wallaby.StatelessQuery.opts

  @doc """
  Fills in a "fillable" element with text. Input elements are looked up by id, label text,
  or name.
  """
  @spec fill_in(parent, locator, opts) :: parent
  # @spec fill_in(Element.t, [with: String.t]) :: Element.t

  def fill_in(parent, locator, [{:with, value} | _]=opts) when is_binary(value) do
    parent
    |> Browser.find(StatelessQuery.fillable_field(locator, opts))
    |> fill_in(with: value)

    parent
  end
  def fill_in(parent, locator, [{:with, value} | _]=opts) when is_number(value) do
    fill_in(parent, locator,  Keyword.merge(opts, [with: to_string(value)]))
  end
  def fill_in(%Element{}=element, with: value) when is_binary(value) do
    element
    |> Element.clear
    |> Element.set_value(value)

    element
  end

  @doc """
  Chooses a radio button based on id, label text, or name.
  """
  @spec choose(parent, locator, opts) :: parent
  # @spec choose(Element.t) :: Element.t

  def choose(parent, locator, opts\\[]) when is_binary(locator) do
    parent
    |> Browser.find(StatelessQuery.radio_button(locator, opts))
    |> Element.click

    parent
  end
  def choose(%Element{}=element) do
    Element.click(element)
  end

  @doc """
  Checks a checkbox based on id, label text, or name.
  """
  @spec check(parent, locator, opts) :: parent
  # @spec check(Element.t) :: Element.t

  def check(parent, locator, opts\\[]) do
    parent
    |> Browser.find(StatelessQuery.checkbox(locator, opts))
    |> Element.check

    parent
  end

  @doc """
  Unchecks a checkbox based on id, label text, or name.
  """
  @spec uncheck(parent, locator, opts) :: parent
  # @spec uncheck(t) :: t

  def uncheck(parent, locator, opts\\[]) do
    parent
    |> Browser.find(StatelessQuery.checkbox(locator, opts))
    |> Element.uncheck

    parent
  end

  @doc """
  Selects an option from a select box. The select box can be found by id, label
  text, or name. The option can be found by its text.
  """
  @spec select(parent, locator, option: String.t) :: parent

  def select(parent, locator, [option: option_text]=opts) do
    parent
    |> Browser.find(StatelessQuery.select(locator, opts))
    |> Browser.find(StatelessQuery.option(option_text, []))
    |> Element.click

    parent
  end

  @doc """
  Clicks the matching link. Links can be found based on id, name, or link text.
  """
  @spec click_link(parent, locator, opts) :: parent

  def click_link(parent, locator, opts\\[]) do
    parent
    |> Browser.find(StatelessQuery.link(locator, opts))
    |> Element.click

    parent
  end

  @doc """
  Clicks the matching button. Buttons can be found based on id, name, or button text.
  """
  @spec click_button(parent, locator, opts) :: parent

  def click_button(parent, locator, opts\\[]) do
    parent
    |> Browser.find(StatelessQuery.button(locator, opts))
    |> Element.click

    parent
  end

  @doc """
  Clicks on the matching button. Alias for `click_button`.
  """
  @spec click_on(parent, locator, opts) :: parent

  def click_on(parent, locator, opts\\[]) do
    click_button(parent, locator, opts)
  end

  # @doc """
  # Clears an input field. Input elements are looked up by id, label text, or name.
  # The element can also be passed in directly.
  # """
  # @spec clear(Session.t, query) :: Session.t
  # def clear(session, query) when is_binary(query) do
  #   session
  #   |> find({:fillable_field, query})
  #   |> clear()
  # end

  @doc """
  Attaches a file to a file input. Input elements are looked up by id, label text,
  or name.
  """
  @spec attach_file(parent, locator, opts) :: parent

  def attach_file(parent, locator, [{:path, value} | _]=opts) do
    path = :filename.absname(value)

    parent
    |> Browser.find(StatelessQuery.file_field(locator, opts))
    |> fill_in(with: path)

    parent
  end
end
